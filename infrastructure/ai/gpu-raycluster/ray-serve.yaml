# Make sure to increase resource requests and limits before using this example in production.
# For examples with more realistic resource configuration, see
# ray-cluster.complete.large.yaml and
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: rmbg-service
  namespace: kube-ray
spec:
  serviceUnhealthySecondThreshold: 900 # Config for the health check threshold for Ray Serve applications. Default value is 900.
  deploymentUnhealthySecondThreshold: 300 # Config for the health check threshold for Ray dashboard agent. Default value is 300.
  # serveConfigV2 takes a yaml multi-line scalar, which should be a Ray Serve multi-application config. See https://docs.ray.io/en/latest/serve/multi-app.html.
  # Only one of serveConfig and serveConfigV2 should be used.
  serveConfigV2: |
    
    proxy_location: EveryNode
    
    http_options:
    
      host: 0.0.0.0
    
      port: 8000
    
    grpc_options:
    
      port: 9000
    
      grpc_servicer_functions: []
    
    logging_config:
    
      encoding: TEXT
    
      log_level: INFO
    
      logs_dir: null
    
      enable_access_log: true
    
    applications:
    
      - name: bgremover
        
        route_prefix: /bgremover
        
        import_path: main:app
        
        runtime_env:
          working_dir: https://github.com/StartUpNationLabs/rmbg/raw/477a4ec760a9764809d39936971b4b54b43af6eb/apps/ray-serve/working_dir.zip
            
        
        deployments:
    
          - name: BGRemover
            autoscaling_config:
              min_replicas: 0
              initial_replicas: null
              max_replicas: 4
              target_ongoing_requests: 2
              metrics_interval_s: 10.0
              look_back_period_s: 30.0
              smoothing_factor: 1.0
              upscale_smoothing_factor: null
              downscale_smoothing_factor: null
              upscaling_factor: null
              downscaling_factor: null
              downscale_delay_s: 600.0
              upscale_delay_s: 30.0
            ray_actor_options:
              num_cpus: 4.0
              num_gpus: 1.0

  rayClusterConfig:
    rayVersion: '2.6.3' # should match the Ray version in the image of the containers
    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          runtimeClassName: nvidia
          nodeSelector:
            kubernetes.io/arch: amd64
          containers:
            - name: ray-head
              image: ghcr.io/startupnationlabs/rmbg-backend:sha-c90adb9ec376a7064902fcb7a291f61a379ec498
              resources:
                limits:
                  cpu: 2
                  memory: 4Gi
                requests:
                  cpu: 2
                  memory: 2Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 1
        minReplicas: 1
        maxReplicas: 5
        # logical group name, for this called small-group, also can be functional
        groupName: small-group
        # The `rayStartParams` are used to configure the `ray start` command.
        # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
        # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
        rayStartParams: {}
        #pod template
        template:
          spec:
            runtimeClassName: nvidia
            nodeSelector:
              kubernetes.io/arch: amd64
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: ghcr.io/startupnationlabs/rmbg-backend:sha-c90adb9ec376a7064902fcb7a291f61a379ec498
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                resources:
                  limits:
                    cpu: "1"
                    memory: "4Gi"
                  requests:
                    cpu: "500m"
                    memory: "2Gi"